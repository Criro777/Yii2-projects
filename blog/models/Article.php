<?php

namespace app\models;

use Yii;
use yii\data\Pagination;

/**
 * This is the model class for table "article".
 *
 * @property integer $id
 * @property string $title
 * @property string $description
 * @property string $content
 * @property string $date
 * @property string $image
 * @property integer $viewed
 * @property integer $category_id
 *
 * @property ArticleTag[] $articleTags
 * @property Comment[] $comments
 */
class Article extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'article';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title'], 'required'],
            [['description'], 'required'],
            [['content'], 'required'],
            [['title', 'description', 'content'], 'string'],
            [['date'], 'date', 'format' => 'php:Y-m-d'],
            [['date'], 'default', 'value' => date('Y-m-d')],
            [['title'], 'string', 'max' => 255],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Title',
            'description' => 'Description',
            'content' => 'Content',
            'date' => 'Date',
            'image' => 'Image',
            'viewed' => 'Viewed',
            'category_id' => 'Category ID',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategory()
    {
        return $this->hasOne(Category::className(), ['id' => 'category_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTags()
    {
        return $this->hasMany(Tag::className(), ['id' => 'tag_id'])
            ->viaTable('article_tag', ['article_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getComments()
    {
        return $this->hasMany(Comment::className(), ['article_id' => 'id']);
    }

    /**
     * Сохранение изображения в базу
     * @param $filename <p>имя файла</p>
     * @return bool
     */
    public function saveImage($filename)
    {
        //записываем в поле image таблицы Article имя файла
        $this->image = $filename;
        return $this->save(false);
    }

    /**
     * Привязка тегов к определённой статье
     * @param $tags <p>массив тегов</p>
     */
    public function saveTags($tags)
    {
        if (!is_array($tags)) {
            ArticleTag::deleteAll(['article_id' => $this->id]);
        } else {
            ArticleTag::deleteAll(['article_id' => $this->id]);
            foreach ($tags as $tag_id) {
                $tag = Tag::findOne($tag_id);
                $this->link('tags', $tag);
            }
        }
    }

    /**
     * Привязка статьи к определённой категории
     * @param $category_id
     */
    public function saveCategory($category_id)
    {
        $category = Category::findOne($category_id);

        $this->link('category', $category);
    }

    /**
     * Получение изображенияф для статьи
     * @return string название файла
     */
    public function getImage()
    {
        return ($this->image) ? '/uploads/' . $this->image : '/no-image.png';
    }

    /**
     * при удалении статьи также удаляем загруженное для неё изображение
     * @return bool
     */
    public function beforeDelete()
    {
        $this->deleteImage();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    /**
     * Удаление изображения
     */
    public function deleteImage()
    {
        if (!empty($this->image) && file_exists(Yii::getAlias('@web') . 'uploads/' . $this->image)) {
            unlink(Yii::getAlias('@web') . 'uploads/' . $this->image);
        }
    }

    /**
     *Получение списка всех статей с пагинацией
     * @param int $pageSize
     * @return mixed
     */
    public static function getAll($pageSize = 5)
    {
        // build a DB query to get all articles
        $query = Article::find();

        // get the total number of articles (but do not fetch the article data yet)
        $count = $query->count();

        // create a pagination object with the total count
        $pagination = new Pagination(['totalCount' => $count, 'pageSize' => $pageSize]);

        // limit the query using the pagination and retrieve the articles
        $articles = $query->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();

        $data['articles'] = $articles;
        $data['pagination'] = $pagination;

        return $data;
    }

    /**
     * получение популярных статей с наибольшим количеством просмотров
     * @return array|\yii\db\ActiveRecord[]
     */
    public static function getPopular()
    {
        return Article::find()->orderBy('viewed desc')->limit(3)->all();
    }

    /**
     * Получение последних добавленных новостей
     * @return array|\yii\db\ActiveRecord[]
     */
    public static function getRecent()
    {
        return Article::find()->orderBy('date desc')->limit(3)->all();
    }

    /**
     * Получение даты в удобном формате
     * @return string
     */
    public function getDate()
    {
        return Yii::$app->formatter->asDate($this->date);
    }

    /**
     * Изменение количестао просмотров статьи
     * @param $id
     */
    public function viewedCounter($id)
    {
        $this->viewed += 1;
        $this->save();
    }
}
